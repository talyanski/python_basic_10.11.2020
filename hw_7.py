#  homework_7

#  1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который должен
#  принимать данные (список списков) для формирования матрицы.
#  Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
#  Примеры матриц вы найдете в методичке.
#  Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
#  Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух
#  матриц). Результатом сложения должна быть новая матрица.
#  Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем
#  с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, matrix):
        self.matrix = matrix

    def __str__(self):
        return "\n".join("\t".join([str(x) for x in y]) for y in self.matrix)

    def __add__(self, other):
        list = []
        for x in range(len(self.matrix)):
            list.append([])
            for y in range(len(self.matrix[0])):
                list[x].append(self.matrix[x][y] + other.matrix[x][y])
        return Matrix(list)


matrix_1 = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
matrix_2 = Matrix([[101, 12, 13], [14, 15, 16], [17, 18, 19]])

print(f"\nматрица 1\n\n{matrix_1}\n")
print(f"матрица 1\n\n{matrix_2}\n")
sum_matrix = matrix_1 + matrix_2
#sum_matrix.str() = sum_matrix
print(f"сумма матриц\n\n{sum_matrix}\n")


#  2. Реализовать проект расчета суммарного расхода ткани на производство одежды. Основная сущность (класс) этого
#  проекта — одежда, которая может иметь определенное название. К типам одежды в этом проекте относятся пальто и костюм.
#  У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма).
#  Это могут быть обычные числа: V и H, соответственно.
#  Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), для костюма
#  (2 * H + 0.3). Проверить работу этих методов на реальных данных.
#  Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания: реализовать
#  абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.

from abc import ABC, abstractmethod

class Clothes(ABC):
    def __init__(self, params):
        self.params = params


    @property
    @abstractmethod
    def expense(self):
        pass


    def __add__(self, other):
        return self.expense + other.expense


class Coat(Clothes):
    @property
    def expense(self):
        return self.params / 6.5 + 0.5


class Costume(Clothes):
    @property
    def expense(self):
        return 2 * (self.params / 100) + 0.3

coat = Coat(int(input("Пальто какого размера вам расчитать: ")))
costume = Costume(int(input("Костюм на какой рост вам расчитать: ")))
print(f"Вам потребуется {round((coat + costume), 2)} метров ткани\n")


#  3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
#  инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
#  перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление
#  (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
#  обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление значения
#  до целого числа.
#  Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
#  клеток.
#  Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
#  больше нуля, иначе выводить соответствующее сообщение.
#  Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
#  этих двух клеток.
#  Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
#  ячеек этих двух клеток.
#  В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
#  метод позволяет организовать ячейки по рядам.
#  Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу
#  . Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
#  Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
#  вернет строку: *****\n*****\n**.
#  Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order()
#  вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, cells):
        self.cells = cells

    def __str__(self):
        return self.cells

    def __add__(self, other):
        return self.cells + other.cells

    def __sub__(self, other):
        new_cell = self.cells - other.cells
        if new_cell > 0:
            return new_cell
        raise ValueError('разница меньше или равня 0')

    def __mul__(self, other):
        return self.cells * other.cells

    def __floordiv__(self, other):
        return self.cells // other.cells

    def make_order(self, rows):
       return "\n".join(["*" * rows for _ in range(self.cells // rows)]) + "\n" + "*" * (self.cells % rows)


cell = Cell(13)
print(f"\nметод организации ячеек по рядам:\n{cell.make_order(4)}")
