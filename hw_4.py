#  homework lesson 4

#  1. Реализованый скрипт в файле "task_1_hw_4.py"

#  2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего
#  элемента.
#  Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
#  Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
#  Результат: [12, 44, 4, 10, 78, 123].

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [my_list[num] for num in range(1, len(my_list)) if my_list[num] > my_list[num - 1]]
print(f'контрольный список:{new_list}\nк списку: {my_list}')
print("end 2", '-' * 40, "\n")

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

new_ = [el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]
print(f'числа кратные 20 или 21 в пределах от 20 до 240:\n{new_}')
print("end 3", '-' * 40, "\n")

# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел,
# соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания
# обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

from random import randint

my_li = [randint(0, 20) for _ in range(20)]
new_li = [el for el in my_li if my_li.count(el) == 1]
print(f'начальный список: {my_li}')
print(f'список без повторений: {new_li}')
print("end 4", '-' * 40, "\n")

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные
# числа от 100 до 1000 (включая границы).
#  Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from random import randint
from functools import reduce

# list_5 = range(100, 1001, 2)
list_5 = [randint(100, 1000) for _ in range(900)]
new_5 = [el for el in list_5 if el % 2 == 0]
sum_all = reduce(lambda x, y: x * y, new_5)

print(f'список четных чисел {new_5}')
print(f'произведение всех элементов списка: {sum_all}')
print("end 5", '-' * 40, "\n")

# 6. Реализовано в отдельном файле 'task_6_hw_4.py'

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить
# только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial
from itertools import count

def gen_fact():
    for el in count(1):
        yield factorial(el)


generator = gen_fact()
x = 0
y = int(input("Введите число для расчета факториала: "))
for i in generator:
    if x == y:
        break
    else:
        x += 1
    print(f'факториал числа {x}! = {i}')
print('-' * 40, "\n")

#  ---------------------второе решение--------------------------

def my_gen(num):
    fact_num = 1
    if num == 0:
        yield f'факториал от 0! = 1'
    for i in range(1, num+1):
        fact_num *= i
        yield f'факториал от {i}! = {fact_num}'


for el in my_gen(int(input("Введите число для расчета факториала: "))):
    print(el)
