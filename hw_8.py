#  1.Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год»
#  . В рамках класса реализовать два метода. Первый, с декоратором @classmethod, должен извлекать число, месяц, год и
#  преобразовывать их тип к типу «Число». Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца
#  и года (например, месяц — от 1 до 12). Проверить работу полученной структуры на реальных данных.

class Data:
    def __init__(self, day_month_year):
        self.day_month_year = str(day_month_year)

    @classmethod
    def extract(cls, day_month_year):
        my_date = []
        for i in day_month_year.split():
            if i != '-':
                my_date.append(i)
        return int(my_date[0]), int(my_date[1]), int(my_date[2])

    @staticmethod
    def validation(day, month, year):
        if 1 <= day <= 31:
            if 1 <= month <= 12:
                if 0 <= year <= 2999:
                    return f'Проверка даты прошла успешно'
                else:
                    return f"вы ввели год не в пределах от 0 до 2999 года"
            else:
                return f"вы ввели месяц не в пределах от 1 до 12 месяца"
        else:
            return f"вы ввели дату не в пределах от 1 до 31 числа"

    def __str__(self):
        return f'Текущая дата {Data.extract(self.day_month_year)}'


data = Data('11 - 12 - 2020')
print(data)
print(Data.validation(11, 12, 2020))
print(Data.validation(11, 11, 3020))
print(data.validation(11, 13, 2020))
print(data.validation(32, 1, 2020))
print(Data.validation(1, 11, 2000))
print(Data.extract('1 - 3 - 2019'))
print(data.extract('2 - 4 - 2020'))

 # 2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на нуль. Проверьте его работу на данных,
 # вводимых пользователем. При вводе пользователем нуля в качестве делителя программа должна корректно обработать эту
 # ситуацию и не завершиться с ошибкой.

class DivisionZero:
    def __init__(self, divider, divident):
        self.divider = divider
        self.divident = divident

    @staticmethod
    def divide_zero(divider, divident):
        try:
            return f"результат деления {divider / divident}"
        except:
            return (f"Деление на ноль запрещено")

div_1 = int(input("Введите делимое: "))
div_2 = int(input("Введите делитель: "))
numbers = DivisionZero(div_1, div_2)
print(numbers.divide_zero(div_1, div_2))


# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
# очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.


class ExceptionNumber(ValueError):
    pass

my_list = []
while True:
    try:
        value = input("Введите число в список, для окончания нажмите 'q': ")
        if value == "q":
            break
        if not value.isdigit():
            raise ExceptionNumber(value)
        my_list.append(int(value))
    except ExceptionNumber as li:
        print("вы ввели не число!", li)
print(f"ваш список: {my_list}")

#  4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад. А также класс «Оргтехника»,
#  который будет базовым для классов-наследников. Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс).
#  В базовом классе определить параметры, общие для приведенных типов. В классах-наследниках реализовать параметры,
#  уникальные для каждого типа оргтехники.

"""не смог"""

#  7. Реализовать проект «Операции с комплексными числами». Создайте класс «Комплексное число», реализуйте перегрузку
#  методов сложения и умножения комплексных чисел. Проверьте работу проекта, создав экземпляры класса (комплексные числа
#  ) и выполнив сложение и умножение созданных экземпляров. Проверьте корректность полученного результата.


class ComplexNumber:
    def __init__(self, a, b, *args):
        self.a = a
        self.b = b
        self.args = args

    def __add__(self, other):
        print(f'Сумма комплексных чисел равна:')
        return f'z = {self.a + other.a} + {self.b + other.b} * i'

    def __mul__(self, other):
        print(f'Произведение комплексных чисел равно:')
        return f'z = {self.a * other.a - (self.b * other.b)} + {self.b * other.a} * i'

    def __str__(self):
        return f'z = {self.a} + {self.b} * i'


z_1 = ComplexNumber(1, 2)
z_2 = ComplexNumber(3, 4)
print(z_1 + z_2)
print(z_1 * z_2)
