#  1. Создать список и заполнить его элементами различных типов данных.
#  Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа.
#  Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

print("_" * 30, "\nЗадание 1:")

list = [1, 2.22, "text", {1, 2}, True, 0B10001, complex(5, 6), None, {5: "volume"}, range(5), set(), frozenset()]
for i in list:
    print(type(i))

#  2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы
#  с индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте.
#  Для заполнения списка элементов необходимо использовать функцию input().

print("_" * 30, "\nЗадание 2:")

user_el = input("Введите произвольное количество слов и цифр: ").split(" ")  # split - преобразуем сразу в list

for i in range(1, len(user_el), 2):
    user_el[i-1], user_el[i] = user_el[i], user_el[i-1]

print(user_el)


#  3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц
#  (зима, весна, лето, осень). Напишите решения через list и через dict.

print("_" * 30, "\nЗадание 3.1 через list:")

user_month = int(input("Введите произвольный месяц в диапазоне от 1 до 12: "))
month_list = [1, "месяц январь - это зима", 2, "месяц февраль - это зима",
              3, "месяц март - это весна", 4, "месяц апрель - это весна", 5, "месяц май - это весна",
              6, "месяц июнь - это лето", 7, "месяц июль - это лето", 8, "месяц август - это лето",
              9, "месяц сентябрь - это осень", 10, "месяц октябрь - это осень", 11, "месяц ноябрь - это осень",
              12, "месяц декабрь - это зима"]
month = month_list.index(user_month)
print(month_list[month + 1])

print("_" * 30, "\nЗадание 3.2 через dict:")

user_month = int(input("Введите произвольный месяц в диапазоне от 1 до 12: "))
month_dict = {
    1: "месяц январь - это зима",
    2: "месяц февраль - это зима",
    3: "месяц март - это весна",
    4: "месяц апрель - это весна",
    5: "месяц май - это весна",
    6: "месяц июнь - это лето",
    7: "месяц июль - это лето",
    8: "месяц август - это лето",
    9: "месяц сентябрь - это осень",
    10: "месяц октябрь - это осень",
    11: "месяц ноябрь - это осень",
    12: "месяц декабрь - зима"
}
print(month_dict.get(user_month))

#  4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
#  Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

print("_" * 30, "\nЗадание 4:")

user_str = input("Введите строку из нескольких слов, разделённых пробелами: ")
list3 = user_str.split(" ")

for i in range(len(list3)):
    print(i+1, "-", list3[i][:10])


#  5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя
#  необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями,
#  то новый элемент с тем же значением должен разместиться после них.
#  Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
#  Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
#  Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
#  Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
#  Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

print("_" * 30, "\nЗадание 5:")
my_list = [7, 5, 3, 3, 2, 1]
print(f'текущий рейтинг - {my_list}')
user_number = int(input("Введите новый числовой рейтинг 0 - 10: "))
count = 0
for i in my_list:
    if user_number <= i:
        count += 1
my_list.insert(count, user_number)
print(my_list)


#  6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит
#  информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами
#  (характеристиками товара: название, цена, количество, единица измерения). Структуру нужно сформировать программно,
#  т.е. запрашивать все данные у пользователя.
#  Пример готовой структуры:
#  [
#  (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
#  (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
#  (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
#  ]
#  Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара,
#  например название, а значение — список значений-характеристик, например список названий товаров.
#  Пример:
#  {
#  “название”: [“компьютер”, “принтер”, “сканер”],
#  “цена”: [20000, 6000, 2000],
#  “количество”: [5, 2, 7],
#  “ед”: [“шт.”]
#  }

index = 1
result = []
spec = {"название": "", "цена": "", "количество": "", "единица измерения": ""}
analytics = {"название": [], "цена": [], "количество": [], "единица измерения": []}

while True:
    question = input("Добавить новый товар да/нет? ")
    if question.lower() == "нет":
        break

    item = {}

    for spe in spec:
        user_data = input(f'Введите "{spe}": ')
        item[spe] = int(user_data) if user_data.isdigit() else user_data  # в одну строку цикл ниже
        #    if user_data.isdigit():
        #       item[spe] = int(user_data)
        #    else:
        #        item[spe] = user_data
        analytics[spe].append(item[spe])
    result.append((index, item))

    index += 1

print(f"\nСтруктура товаров\n{result}")
print(f"\nТекущая аналитика по товарам:\n")
for key, value in analytics.items():
    print(f"{key}: {value}")
